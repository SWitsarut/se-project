generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  username      String    @unique
  email         String    @unique
  displayName   String
  password      String
  avatar        String?
  role          Role      @default(USER)
  isActive      Boolean   @default(true)
  emailVerified DateTime?

  createdAt        DateTime        @default(now())
  publisherId      Int?
  publisher        Publisher?      @relation("PublisherStaff", fields: [publisherId], references: [id])
  managedPublisher Publisher?      @relation("PublisherManager")
  ownedBooks       BookOwnership[]
  cart             CartItem[]
  favorites        Favorite[]
  report           Report[]
  sender           ChatMessage[] @relation("ChatSender")
  receiver         ChatMessage[] @relation("ChatReceiver")
  UserSession      UserSession[]

  @@index([username, email])
  @@map("user")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Publisher {
  id            Int    @id @default(autoincrement())
  publisherName String @unique

  book      Book[]
  managerId String? @unique
  manager   User?   @relation("PublisherManager", fields: [managerId], references: [id])
  staffs    User[]  @relation("PublisherStaff")

  @@index([publisherName])
  @@map("publisher")
}

model Book {
  isbn        String  @id
  title       String  @unique
  price       Float
  cover       String
  pdfUrl      String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isSelling Boolean  @default(true)

  publisher   Publisher       @relation(fields: [publisherId], references: [id])
  publisherId Int
  category    Category        @relation(fields: [categoryId], references: [id])
  categoryId  Int
  genres      Genre[]         @relation(name: "BookGenres")
  authors     Author[]        @relation(name: "BookAuthors")
  ownedBooks  BookOwnership[]
  cart        CartItem[]
  favorites   Favorite[]
  reports     Report[]

  @@index([title])
  @@map("book")
}

model CartItem {
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  book     Book   @relation(fields: [bookIsbn], references: [isbn], onDelete: Cascade)
  bookIsbn String

  @@id([userId, bookIsbn])
  @@map("cart_item")
}

model Favorite {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  book      Book     @relation(fields: [bookIsbn], references: [isbn])
  bookIsbn  String
  createdAt DateTime @default(now())

  @@id([userId, bookIsbn])
}

model BookOwnership {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  book      Book     @relation(fields: [bookIsbn], references: [isbn])
  userId    String
  bookIsbn  String
  createdAt DateTime @default(now())

  @@unique([userId, bookIsbn], name: "OwnershipPair")
}

model Invoice {
  id         Int         @id @default(autoincrement())
  userOrders UserOrder[] @relation("InvoiceUserOrders")
  createdAt  DateTime    @default(now())
}

model UserOrder {
  id        Int     @id @default(autoincrement())
  invoice   Invoice @relation("InvoiceUserOrders", fields: [invoiceId], references: [id])
  invoiceId Int

  @@unique([id, invoiceId])
}

model Category {
  id           Int    @id @default(autoincrement())
  categoryName String @unique

  books Book[]

  @@map("category")
}

model Genre {
  id        Int    @id @default(autoincrement())
  genreName String @unique

  books Book[] @relation(name: "BookGenres")

  @@map("genre")
}

model Author {
  id         Int    @id @default(autoincrement())
  authorName String @unique

  books Book[] @relation(name: "BookAuthors")

  @@map("author")
}

model Report {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  book       Book     @relation(fields: [bookIsbn], references: [isbn])
  userId     String
  bookIsbn   String
  reason     String
  status     ReportStatus @default(PENDING)
  createdAt DateTime     @default(now())
}


model ChatMessage {
  id        String   @id @default(uuid())
  sender    String
  receiver  String
  content   String
  timeStamp DateTime @default(now())

  senderData   User @relation("ChatSender", fields: [sender], references: [id])
  receiverData User @relation("ChatReceiver", fields: [receiver], references: [id])
}

model UserSession {
  id        String @id
  sessionId String
  user      User?  @relation(fields: [id], references: [id])
}

enum Role {
  USER
  ADMIN
  PUBLISHER
}

enum ReportStatus {
  PENDING
  REVIEWED
  DISMISSED
}
